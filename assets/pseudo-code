Psuedo Code for Project 10
Unit 10 OOP Homework: Template Engine - Employee Summary

Assignment: your challenge is to build a Node CLI that takes in information about employees and generates an HTML webpage that displays summaries for each person. Since testing is a key piece in making code maintainable, you will also be ensuring that all unit tests pass.


Needed:
Testing Files
Inquirer 


Notes:
CLI program
Use Inquirer to prompt user for Manager and employee information
-  The application will prompt the user for information about the team manager and then information about the team members. 

1 Manager and then need to submit a number for how many employees are on the team for inquirer
Employees can be a mix of either Engineer or Interns - 

When the user has completed building the team, the application will create an HTML file that displays a nicely formatted team roster based on the information provided by the user.
 - Following the common templates for user stories, we can frame this challenge as follows: https://en.wikipedia.org/wiki/User_story#Common_templates

Your app will run as a Node CLI to gather information about each employee.
Start CLI - Once Completed, it generates the HTML pages or fills in the HTML pages

It is recommended that you follow this workflow:
1. Run tests
2. Create or update classes to pass a single test case
3. Repeat

It is recommended that you start with a directory structure that looks like this:
lib/           // classes and helper code
output/        // rendered output
templates/     // HTML template(s)
test/          // jest tests
  Employee.test.js
  Engineer.test.js
  Intern.test.js
  Manager.test.js
app.js         // Runs the application

Hints:
- Create multiple HTML templates for each type of user. For example, you could use the following templates:
--main.html
--engineer.html
--intern.html
--manager.html

-You will want to make your methods as pure as possible. This means try to make your methods simple so that they are easier to test.

-The different employee types should all inherit some methods and properties from a base class of Employee.

-In your HTML template files, you may want to add a placeholder character that helps your program identify where the dynamic markup begins and ends.


Class Requirements:
Must have these 4 classes:
- Employee (Parent Class) - Export Class
- Manager (Extended Class from Employee) Requires Employee
- Engineer (Extended Class from Employee) Requires Employee
- Intern (Extended Class from Employee) Requires Employee

The first class is an Employee parent class with the following properties and methods:
-name
-id
-email
-getName()
-getId()
-getEmail()
-getRole() // Returns 'Employee'

Manager Extended Classes:
-officeNumber
-getRole() // Overridden to return 'Manager'

Engineer Extended Classes:
-github  // GitHub username
-getGithub()
-getRole() // Overridden to return 'Engineer'

Intern Extended Classes:
-school
-getSchool()
-getRole() // Overridden to return 'Intern'


User input:
The project must prompt the user to build an engineering team. An engineering
team consists of a manager, and any number of engineers and interns.


Roster output:
The project must generate a team.html page in the output directory, that displays a nicely formatted team roster. Each team member should display the following in no particular order:
-Name
-Role
-ID
-Role-specific property (School, link to GitHub profile, or office number)







 Inquirer Notes:
 prompt the user for their email, id, and specific information based on their role with the company.
 : For instance, an intern may provide their school, whereas an engineer may provide their GitHub username.




Componets:
CLI JS File - Runs Application
Classes JS Files: - Holds class information for constructors 
- Employee (Parent Class)
- Manager (Extended Class from Employee)
- Engineer (Extended Class from Employee)
- Intern (Extended Class from Employee)

HTML Pages:
--main.html - Main page for application to print 
--engineer.html - Card design for engineer
--intern.html - Card design for intern
--manager.html - Card design for Manager

Test Files:
Tests for Classes files

Steps:
HTML is arleady completed 
TESTS are already completed
Need to fil in the files in the LIB folder 
1. Create Employee Class
2. Create extended classes for manager, intern, engineer
3. Test using the existing tests in the test folder

4. Set up Inquirer Questions
4a. Intro to App
4b. Manager Information
4c. Select Employee # (allows to enter a number of employees to loop through and create additional cards) (include validation checks to ensure its a number)
4d. Employee Card Loop - 
4e. Employee Position Selection (Engineer or Intern) (If statement that asks the next questions depending on their position to collect information)
4f. Depending on choice, it either prompts for Engineer information or Intern information

5. Once all cards are completed, bounces information to the HTML page/ends CLI and prints success message. 


Problems:
4d - Cannot get it to loop through questions using a loop as it asks the same question i amount of times. 
Solution to 4d - Instead, go with another function to ask if the user wants to add another team member and brings them back to the section to choose between intern/engineer and then creates a new constructor class for each new input. If they choose no, then the program ends 
